name: Deploy QuizMaster V2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: 18

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend-vite/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend-vite
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_COGNITO_DOMAIN: ${{ secrets.VITE_COGNITO_DOMAIN }}
        VITE_COGNITO_CLIENT_ID: ${{ secrets.VITE_COGNITO_CLIENT_ID }}
        VITE_REDIRECT_URI: ${{ secrets.VITE_REDIRECT_URI }}
        VITE_LOGOUT_URI: ${{ secrets.VITE_LOGOUT_URI }}
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  deploy-to-s3:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create S3 bucket if not exists
      run: |
        BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
        if ! aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "Bucket $BUCKET_NAME already exists"
        else
          echo "Creating bucket $BUCKET_NAME"
          aws s3 mb s3://$BUCKET_NAME
          
          # Enable static website hosting
          aws s3 website s3://$BUCKET_NAME --index-document index.html --error-document index.html
          
          # Set bucket policy for public access
          cat > bucket-policy.json << EOF
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "PublicReadGetObject",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
                  }
              ]
          }
          EOF
          
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json
        fi
    
    - name: Deploy to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        echo "Frontend deployed to: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"

  deploy-backend:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-vite/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend-vite
        npm ci
        npm install -g serverless
        npm install serverless-http
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create DynamoDB table if not exists
      run: |
        # Check if table exists
        if aws dynamodb describe-table --table-name QuizMasterTable --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "DynamoDB table QuizMasterTable already exists"
        else
          echo "Creating DynamoDB table QuizMasterTable"
          aws dynamodb create-table \
            --table-name QuizMasterTable \
            --attribute-definitions \
                AttributeName=PK,AttributeType=S \
                AttributeName=SK,AttributeType=S \
            --key-schema \
                AttributeName=PK,KeyType=HASH \
                AttributeName=SK,KeyType=RANGE \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ env.AWS_REGION }}
          
          # Wait for table to be active
          aws dynamodb wait table-exists --table-name QuizMasterTable --region ${{ env.AWS_REGION }}
          echo "DynamoDB table created successfully"
        fi
    
    - name: Deploy backend to Lambda
      run: |
        cd backend-vite
        serverless deploy --stage prod
      env:
        COGNITO_POOL_ID: ${{ secrets.COGNITO_POOL_ID }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
        COGNITO_REGION: ${{ env.AWS_REGION }}
        COGNITO_DOMAIN: ${{ secrets.COGNITO_DOMAIN }}
        DYNAMODB_TABLE: QuizMasterTable

  update-frontend-config:
    needs: [deploy-to-s3, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get API Gateway URL and update frontend
      run: |
        cd backend-vite
        npm install -g serverless
        
        # Get the API Gateway URL
        API_URL=$(serverless info --stage prod | grep "endpoints:" -A 1 | tail -1 | awk '{print $2}')
        echo "API URL: $API_URL"
        
        # Update frontend environment and rebuild
        cd ../frontend
        npm ci
        
        # Create production environment file with API URL
        cat > .env.production << EOF
        VITE_COGNITO_DOMAIN=${{ secrets.VITE_COGNITO_DOMAIN }}
        VITE_COGNITO_CLIENT_ID=${{ secrets.VITE_COGNITO_CLIENT_ID }}
        VITE_REDIRECT_URI=http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com/callback
        VITE_LOGOUT_URI=http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com/login
        VITE_API_BASE_URL=$API_URL
        EOF
        
        # Rebuild with correct API URL
        npm run build
        
        # Redeploy to S3
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        
        echo "✅ Deployment complete!"
        echo "🌐 Frontend: http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "🔗 Backend API: $API_URL"